Mat makeFilter(int tip, int w)
{
	Mat mat(w, w, CV_32FC1);
	switch (tip)
	{
	case 1:
	{
		for (int i = 0; i < w; i++)
		{
			for (int j = 0; j < w; j++)
			{
				if (i == 0 && j == 0) mat.at<float>(i, j) = 1;
				if (i == 2 && j == 0) mat.at<float>(i, j) = 1;
				if (i == 0 && j == 2) mat.at<float>(i, j) = 1;
				if (i == 2 && j == 2) mat.at<float>(i, j) = 1;

				if (i == 0 && j == 1) mat.at<float>(i, j) = 2;
				if (i == 1 && j == 0) mat.at<float>(i, j) = 2;
				if (i == 1 && j == 2) mat.at<float>(i, j) = 2;
				if (i == 2 && j == 1) mat.at<float>(i, j) = 2;

				if (i == 1 && j == 1) mat.at<float>(i, j) = 4;

			}
		}
		return mat;
	}
	case 2:
	{
		for (int i = 0; i < w; i++)
		{
			for (int j = 0; j < w; j++)
			{
				mat.at<float>(i, j) = 1;
			}
		}
		return mat;
	}
	case 3:
	{
		for (int i = 0; i < w; i++)
		{
			for (int j = 0; j < w; j++)
			{
				if (i == 0 && j == 0) mat.at<float>(i, j) = 0;
				if (i == 2 && j == 0) mat.at<float>(i, j) = 0;
				if (i == 0 && j == 2) mat.at<float>(i, j) = 0;
				if (i == 2 && j == 2) mat.at<float>(i, j) = 0;

				if (i == 0 && j == 1) mat.at<float>(i, j) = -1;
				if (i == 1 && j == 0) mat.at<float>(i, j) = -1;
				if (i == 1 && j == 2) mat.at<float>(i, j) = -1;
				if (i == 2 && j == 1) mat.at<float>(i, j) = -1;

				if (i == 1 && j == 1) mat.at<float>(i, j) = 4;

			}
		}
		return mat;
	}
	case 4:
	{
		for (int i = 0; i < w; i++)
		{
			for (int j = 0; j < w; j++)
			{
				if (i == 1 && j == 1) mat.at<float>(i, j) = 8;
				else mat.at<float>(i, j) = -1;

			}
		}
		return mat;
	}
	case 5:
	{
		for (int i = 0; i < w; i++)
		{
			for (int j = 0; j < w; j++)
			{
				if (i == 0 && j == 0) mat.at<float>(i, j) = 0;
				if (i == 2 && j == 0) mat.at<float>(i, j) = 0;
				if (i == 0 && j == 2) mat.at<float>(i, j) = 0;
				if (i == 2 && j == 2) mat.at<float>(i, j) = 0;

				if (i == 0 && j == 1) mat.at<float>(i, j) = -1;
				if (i == 1 && j == 0) mat.at<float>(i, j) = -1;
				if (i == 1 && j == 2) mat.at<float>(i, j) = -1;
				if (i == 2 && j == 1) mat.at<float>(i, j) = -1;

				if (i == 1 && j == 1) mat.at<float>(i, j) = 5;

			}
		}
		return mat;
	}
	case 6:
	{
		for (int i = 0; i < w; i++)
		{
			for (int j = 0; j < w; j++)
			{
				if (i == 1 && j == 1) mat.at<float>(i, j) = 9;
				else mat.at<float>(i, j) = -1;

			}
		}
		return mat;
	}

	default:
		return mat;
	}
}
float sumMatPos(Mat img)
{
	float sum = 0;
	for (int i = 0; i < img.rows; i++)
	{
		for (int j = 0; j < img.cols; j++)
		{
			if (img.at<float>(i, j) > 0) sum += img.at<float>(i, j);
		}
	}
	return sum;
}

float sumMatNeg(Mat img)
{
	float sum = 0;
	for (int i = 0; i < img.rows; i++)
	{
		for (int j = 0; j < img.cols; j++)
		{
			if (img.at<float>(i, j) < 0) sum += img.at<float>(i, j);
		}
	}
	return sum;
}


Mat getMagnitude(Mat mag)
{
	Mat dst = mag.clone();
	for (int i = 0; i < mag.rows; i++)
	{
		for (int j = 0; j < mag.cols; j++)
		{
			dst.at<float>(i, j) = log(mag.at<float>(i, j) + 1);
		}
	}
	float maxi = 0;
	float mini = 255;
	for (int i = 0; i < mag.rows; i++)
	{
		for (int j = 0; j < mag.cols; j++)
		{
			if (dst.at<float>(i, j) > maxi) maxi = dst.at<float>(i, j);
			else if (dst.at<float>(i, j) < mini) mini = dst.at<float>(i, j);
		}
	}
	for (int i = 0; i < dst.rows; i++)
	{
		for (int j = 0; j < dst.cols; j++)
		{
			dst.at<float>(i, j) = (dst.at<float>(i, j) - mini) / (maxi - mini);
		}
	}

	return dst;
}
Mat imfilter(Mat img, Mat H)
{
	Mat dst = img.clone();
	float a, b;
	b = sumMatPos(H);
	a = sumMatNeg(H);
	b *= 255;
	int w = H.rows;
	for (int i = 0; i < img.rows; i++)
	{
		for (int j = 0; j < img.cols; j++)
		{
			float rez = 0;
			for (int u = 0; u < H.rows; u++)
			{
				for (int v = 0; v < H.cols; v++)
				{
					if (inBounds(img, i + u - w / 2, j + v - w / 2))
					{
						rez += H.at<float>(u, v) * img.at<uchar>(i + u - w / 2, j + v - w / 2);
					}
				}
			}
			dst.at<uchar>(i, j) = (rez - a) / (b - a) * 255;

		}
	}
	imshow("this is what happened", dst);
	waitKey();
	return dst;


}

Mat gaussianFilterDown(Mat X)
{
	Mat X1 = X.clone();
	float temp1 = X.rows / 2;
	float temp2 = X.cols / 2;
	for (int u = 0; u < X.rows; u++)
	{
		for (int v = 0; v < X.cols; v++)
		{
			float a = (temp1 - u) * (temp1 - u);
			float b = (temp2 - v) * (temp2 - v);
			float exponent = -(a + b) / 100.0;
			X1.at<float>(u, v) = X.at<float>(u, v) * exp(exponent);
		}
	}
	return X1;
}
Mat gaussianFilterUp(Mat X)
{
	Mat X1 = X.clone();
	float temp1 = X.rows / 2;
	float temp2 = X.cols / 2;
	for (int u = 0; u < X.rows; u++)
	{
		for (int v = 0; v < X.cols; v++)
		{
			float a = (temp1 - u) * (temp1 - u);
			float b = (temp2 - v) * (temp2 - v);
			float exponent = -(a + b) / 100.0;
			float aux = 1 - exp(exponent);
			X1.at<float>(u, v) = X.at<float>(u, v) *aux;

		}
	}
	return X1;
}

Mat filtruIdealJos(Mat X)
{
	Mat X1 = X.clone();
	float temp1 = X.rows / 2;
	float temp2 = X.cols / 2;
	for (int u = 0; u < X.rows; u++)
	{
		for (int v = 0; v < X.cols; v++)
		{
			float a = (temp1 - u) * (temp1 - u);
			float b = (temp2 - v) * (temp2 - v);
			if (a + b <= 100.0) X1.at<float>(u, v) = X.at<float>(u, v);
			else X1.at<float>(u, v) = 0;
		}
	}
	return X1;
}
Mat filtruIdealSus(Mat X)
{
	Mat X1 = X.clone();
	float temp1 = X.rows / 2;
	float temp2 = X.cols / 2;
	for (int u = 0; u < X.rows; u++)
	{
		for (int v = 0; v < X.cols; v++)
		{
			float a = (temp1 - u) * (temp1 - u);
			float b = (temp2 - v) * (temp2 - v);
			if (a + b >= 100.0) X1.at<float>(u, v) = X.at<float>(u, v);
			else X1.at<float>(u, v) = 0;
		}
	}
	return X1;
}

void centering_transform(Mat img){
	//expects floating point image
	for (int i = 0; i <img.rows; i++){
		for (int j = 0; j <img.cols; j++)
		{
			img.at<float>(i, j) = ((i + j) & 1) ? -img.at<float>(i, j) : img.at<float>(i, j);
		}
	}
}

Mat convReal(Mat mag, Mat phi)
{
	Mat dst = mag.clone();
	for (int i = 0; i < mag.rows; i++)
	{
		for (int j = 0; j < mag.cols; j++)
		{
			dst.at<float>(i, j) = cos(phi.at<float>(i, j)) * mag.at<float>(i, j);
		}
	}
	return dst;
}
Mat convImg(Mat mag, Mat phi)
{
	Mat dst = mag.clone();
	for (int i = 0; i < mag.rows; i++)
	{
		for (int j = 0; j < mag.cols; j++)
		{
			dst.at<float>(i, j) = sin(phi.at<float>(i, j)) * mag.at<float>(i, j);
		}
	}
	return dst;
}


Mat generic_frequency_domain_filter(Mat src, int filtertype){
	//convert input image to float image
	Mat srcf;
	src.convertTo(srcf, CV_32FC1);
	//centering transformation
	centering_transform(srcf);
	//perform forward transform with complex image output
	Mat fourier;
	dft(srcf, fourier, DFT_COMPLEX_OUTPUT);
	//split into real and imaginary channels
	Mat channels[] = { Mat::zeros(src.size(), CV_32F), Mat::zeros(src.size(), CV_32F) };
	split(fourier, channels);
	// channels[0] = Re(DFT(I)), channels[1] = Im(DFT(I))
	//calculate magnitude and phase in floating point images mag and phi
	Mat mag, phi;
	magnitude(channels[0], channels[1], mag);
	phase(channels[0], channels[1], phi);
	//display the phase and magnitude here
	imshow("Magnitude", mag);
	Mat temp0 = getMagnitude(mag);
	imshow("Calculated magnitude", temp0);
	//insert filtering operations here
	if (filtertype == 1)
		mag = gaussianFilterDown(mag);
	else if (filtertype == 2)
		mag = gaussianFilterUp(mag);
	else if (filtertype == 3)
		mag = filtruIdealJos(mag);
	else if (filtertype == 4)
		mag = filtruIdealSus(mag);

	//convert from polar representation to cartesian,
	//store inreal part inchannels[0] and imaginary part in channels[1]
	Mat realMag = convReal(temp0, phi);
	imshow("imageReal", realMag);
	channels[0] = convReal(mag, phi);
	channels[1] = convImg(mag, phi);
	//waitKey();
	//perform inverse transform and put results in dstf
	Mat dst, dstf;
	merge(channels, 2, fourier);
	dft(fourier, dstf, DFT_INVERSE | DFT_REAL_OUTPUT | DFT_SCALE);
	//inverse centering transformation
	centering_transform(dstf);
	//normalize the result and put in the destination image
	normalize(dstf, dst, 0, 255, NORM_MINMAX, CV_8UC1);
	return dst;
}

	case 38:
		{
			Mat img = imread("Images/cameraman.bmp", CV_LOAD_IMAGE_GRAYSCALE);
			Mat filtru = makeFilter(6, 3);
			imfilter(img, filtru);
			waitKey();
			break;
		}
		case 39:
		{
			Mat img = imread("Images/cameraman.bmp", CV_LOAD_IMAGE_GRAYSCALE);
			Mat res = generic_frequency_domain_filter(img, 3);
			imshow("final result", res);
			waitKey();
			break;
		}

